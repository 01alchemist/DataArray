defaultTasks "build"

// Change this to name of your starting script file in the src dir.
def targetClassList = ["BitArray","ByteArrayBase","ByteArray"]
def node_mods = "node_modules"
def phantomjs = node_mods+"/phantomjs/bin/phantomjs"
def requirejs = node_mods+"/requirejs/bin/r.js"

task removeBuild(type:Delete) {
	delete "build/"
}

task createBuild(type:Exec, dependsOn:"removeBuild") {
	commandLine "mkdir", "build"
}

task clean(dependsOn:"createBuild") {
	FileTree tree = fileTree('src').include('**/*.js')
	tree.each { File file -> delete file }
}

/*task build(dependsOn:"clean") {
	def tsc = "tsc"
	for (targetClass in targetClassList ) {
		  println "Compiling file ${targetClass}..."
				exec {
					executable "tsc"
					args "-t", "ES5", "--declaration", "--out", "build/"+targetClass+".js", "src/"+targetClass+".ts", "--sourcemap"
				}
   }
}*/

task build2(dependsOn:"clean") {
	List compileTasks = []
	/*for (targetClass in targetClassList ) {
		compileTasks << createCompileTask(targetClass)
	}*/
	targetClassList.each{
		targetClass ->
		compileTasks << createCompileTask(targetClass)
	}
	compileTasks.each{
		it.mustRunAfter clean
		it.execute()
	}

	println "Finised execution"
}

private createCompileTask(targetClass) {
  println "Creating compile task for $targetClass"
  return task("Compiling $targetClass",type:Exec) {
    //commandLine "tsc", "-t", "ES5", "--declaration", "--out", "build/"+targetClass+".js", "src/"+targetClass+".ts", "--sourcemap"
    commandLine "echo", "test $targetClass"
  }
}